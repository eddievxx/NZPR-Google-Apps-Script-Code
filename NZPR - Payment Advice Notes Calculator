///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
function sortList(){
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var firstSheet = ss.getSheetByName("Inbox_Sheet");
  var secondSheet = ss.getSheetByName("Merged_Sheet")
  
  var data = firstSheet.getDataRange().getValues();
  var ListOfFEDNumbers = secondSheet.getDataRange().getValues();
  
  var range = firstSheet.getRange("A2:Q1000");
  range.sort([{column: 1, ascending: true}, {column: 4, ascending: true}]);
  Browser.msgBox('Sort', 'List sorted (by client FED No. then Reference No.)', Browser.Buttons.OK);
}


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
function removeDuplicates() {
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var firstSheet = ss.getSheetByName("Inbox_Sheet");
  var secondSheet = ss.getSheetByName("Merged_Sheet")
  
  //var sheet = SpreadsheetApp.getActiveSheet();
  var cells = firstSheet.getDataRange().getValues();
  var newData = new Array();
  for(i in cells){
    var row = cells[i];
    var duplicate = false;
    for(j in newData){
      if(row.join() == newData[j].join()){
        duplicate = true;
      }
    }
    if(!duplicate){
      newData.push(row);
    }
  }
  firstSheet.clearContents();
  firstSheet.getRange(1, 1, newData.length, newData[0].length).setValues(newData);
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
function clearFirstSheet() {
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var firstSheet = ss.getSheetByName("Inbox_Sheet");
  var secondSheet = ss.getSheetByName("Merged_Sheet");
  
  firstSheet.getRange(2, 1, firstSheet.getLastRow(), firstSheet.getLastColumn()).clear();

}


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
function feeChecks() {
  var NZPRcommisionRate = 0.15;        //this is where the NZPR commision is set
  
  var ListOfFEDNumbers = [];
  
  var ss = SpreadsheetApp.getActiveSpreadsheet();   //naming the spreadsheet and sheets
  var firstSheet = ss.getSheetByName("Inbox_Sheet");
  var secondSheet = ss.getSheetByName("Merged_Sheet");
  
  firstSheet.getRange("N2").setFormula("=UNIQUE(A2:A)");
  firstSheet.getRange("O2").setFormula("=COUNTA(N2:N)");
  
  var numberOfFEDNumbers = firstSheet.getRange(2,15).getValues();
  
  var data = firstSheet.getDataRange().getValues();    //storing all the data on the page in an array for use in all calcs
  
   for(n=0; n < numberOfFEDNumbers; ++n){
    ListOfFEDNumbers[n] = data[n+1][13]; // 13 is the index of the column (starting from 0)
  }

  var targetFED;// = ListOfFEDNumbers[1][0];
  var BtotalCredit = new Array(numberOfFEDNumbers);
  var DreferenceNumber = new Array(numberOfFEDNumbers);
  var EclaimPeriod = new Array(numberOfFEDNumbers);
  var Ffee = new Array(numberOfFEDNumbers);
      
  for (var i = 0; i < numberOfFEDNumbers; i++) {
    BtotalCredit[i] = 0;
    DreferenceNumber[i] = ('| ').toString();
    EclaimPeriod[i] =  ('| ').toString();
    Ffee[i] = 0;
  }
  
  var CpaymentDate = [];
  var GclientName = [];
  var Hagent = [];
  var IagentCut = [];
  
  var JnzprCommission = [];
  var KclientRefund = [];
  var LagentCommission = [];
  
  var ClientsEmail = [];
  
  var maxRefund = []; //a variable to display the maximum variable allowable if the tax back isn't enough to cover their fee
   
  //for (var j = 1; j < ListOfFEDNumbers.length-1; j++){  //loop for each unique FED Number
  for (var j = 0; j < numberOfFEDNumbers; j++){  //loop for each unique FED Number
    targetFED = ListOfFEDNumbers[j];
    
    for (var i = 1; i < data.length; i++){   //loop for each line in the spreadsheet
      if(data[i][0] == targetFED){           //ensures the data stored in each of the following arrays is for each unique FED number
        BtotalCredit[j] = +BtotalCredit[j] + +data[i][1];
        CpaymentDate[j] = data[i][2];
        DreferenceNumber[j] += data[i][3] + " | ";
        EclaimPeriod[j] += data[i][4] + " | ";
        Ffee[j] += +data[i][5];
        GclientName[j] = data[i][6];
        Hagent[j] = data[i][7];
        IagentCut[j] = data[i][8];
        ClientsEmail[j] = data[i][12];
      }
      /*
      JnzprCommission[j] = BtotalCredit[j]*NZPRcommisionRate+Ffee[j];
      KclientRefund[j] = BtotalCredit[j]*(1-NZPRcommisionRate)-Ffee[j];
      LagentCommission[j] = BtotalCredit[j]*(IagentCut[j]/100);
      */
      JnzprCommission[j] = (BtotalCredit[j]/1.15)*NZPRcommisionRate+Ffee[j];
      KclientRefund[j] = (BtotalCredit[j]/1.15)*(1-NZPRcommisionRate)-Ffee[j];
      LagentCommission[j] = (BtotalCredit[j]/1.15)*(IagentCut[j]/100);
      
      //Sends to Logger
      ///*
      Logger.log(j+" "+i)
      Logger.log('targetFED: '        + targetFED);
      Logger.log('FED Number: '       + data[i][0]);
      Logger.log('TotalCredit: '      + data[i][1]);
      Logger.log('Payment Date: '     + data[i][2]);
      Logger.log('Reference Number: ' + data[i][3]);
      Logger.log('Claim Period: '     + data[i][4]);
      Logger.log('FEE: '              + Ffee[j]);
      Logger.log("SUM: "              + BtotalCredit[j]);
      Logger.log("RefNo: "            + DreferenceNumber[j]);
      Logger.log("Commision: "        + JnzprCommission[j]);
      Logger.log("Refund: "           + KclientRefund[j]);
      Logger.log("email: "            + ClientsEmail[j]);
      Logger.log("  ");
      //*/
    }
    maxRefund[j] = Ffee[j] + KclientRefund[j];//previously had 343.85 instead of Ffee[j] which caused errors when fee was changed.
    if(KclientRefund[j] < 0){
      Browser.msgBox('Fee Check', 'Fee will be too large for '+GclientName[j]+', current refund is '+KclientRefund[j]+'. Max refund is '+maxRefund[j]+'. Reduce the fee then run this Check again.', Browser.Buttons.OK);
      return;
    }

    if(ClientsEmail[j] == ""){
      Browser.msgBox('Email Address Check', 'No email address for '+GclientName[j]+', add their email to the Client sheet then run this Check again.', Browser.Buttons.OK);
      return;
    }
    
  }
  Browser.msgBox('Fee Check', 'All Refund amounts are positive & email addresses exist, you can now Send to Xero', Browser.Buttons.OK);
}



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
function emailRemittanceAdvice() {
  var NZPRcommisionRate = 0.15;        //this is where the NZPR commision is set
  var ListOfFEDNumbers = [];

  var ss = SpreadsheetApp.getActiveSpreadsheet(); //naming the spreadsheet and sheets
  var inboxSheet = ss.getSheetByName("Inbox_Sheet");
  var dataSheet = ss.getSheetByName("Data_Sheet");
  var templateSheet = ss.getSheetByName("Commision_Invoice");

  inboxSheet.getRange("N2").setFormula("=UNIQUE(A2:A)");
  inboxSheet.getRange("O2").setFormula("=COUNTA(N2:N)");
  
  var numberOfFEDNumbers = inboxSheet.getRange(2, 15).getValues();
  
  var data = inboxSheet.getDataRange().getValues(); //storing all the data on the inbox_sheet in an array for use in all calcs
  var refundData; //as above but from the refund template; when populated
  for (n = 0; n < numberOfFEDNumbers; ++n) {
    ListOfFEDNumbers[n] = data[n + 1][13]; // 13 is the index of the column (starting from 0)
  }
  
  var targetFED; // = ListOfFEDNumbers[1][0];
  
  var ClientsName = [];
  var ClientsEmail = [];
  var ClientsFirstName = [];
  
  var BtotalCredit = new Array(numberOfFEDNumbers);
  var Ffee = new Array(numberOfFEDNumbers);
      
  for (var i = 0; i < numberOfFEDNumbers; i++) {
    BtotalCredit[i] = 0;
    Ffee[i] = 0;
  }
  var KclientRefund = [];
  


  var ClientsFee = new Array(numberOfFEDNumbers); //creates the array ClientsFee, with a length of numberOfFEDNumbers
  for (var i = 0; i < numberOfFEDNumbers; i++) {  //fills the array ClientsFee with 0s
    ClientsFee[i] = 0;
  }
  
  for (var j = 0; j < numberOfFEDNumbers; j++) { //loop for each unique FED Number to store the caluclated values
    targetFED = ListOfFEDNumbers[j];
    
    for (var i = 1; i < data.length; i++) { //loop for each line in the spreadsheet
      if (data[i][0] == targetFED) { //ensures the data stored in each of the following arrays is for each unique FED number
        
        BtotalCredit[j] = +BtotalCredit[j] + +data[i][1];
        
        dataSheet.appendRow([data[i][0],//writes data from the correct FED number only to the data_sheet
                             data[i][1],
                             data[i][2],
                             data[i][3],
                             data[i][4],
                             data[i][5],
                             data[i][6],
                             data[i][7],
                             data[i][8],
                             data[i][9],
                             data[i][10],
                             data[i][11],
                             data[i][12],
                             data[i][15] 
                            ]);
        ClientsName[j] = data[i][6];
        ClientsEmail[j] = data[i][12];
        ClientsFee[j] += data[i][5];
        ClientsFirstName[j] = data[i][16];
        
        /*
        KclientRefund[j] = BtotalCredit[j]*(1-NZPRcommisionRate)-ClientsFee[j];
        KclientRefund[j] = KclientRefund[j].toFixed(2);
        */
        
        KclientRefund[j] = (BtotalCredit[j]/1.15)*(1-NZPRcommisionRate)-ClientsFee[j];
        KclientRefund[j] = KclientRefund[j].toFixed(2);
        var clientRefundInclusive = KclientRefund[j] * 1.15;
        clientRefundInclusive = clientRefundInclusive.toFixed(2);
      }

    }
    Logger.log(ClientsName[j]);
    Logger.log(ClientsEmail[j]);
    Logger.log(ClientsFee[j]);
    
    clearDataSheet();
    
    //PDF CONVERSION AND EMAIL SECTION OF CODE///////////////////////////////////////////                                                        
    var date = Utilities.formatDate(new Date(), "GMT+12", "dd-MM-yyyy'T'HH:mm:ss'Z'");
    
    // Send the PDF of the spreadsheet to this email address
    //var email = "bernard@nzpetrolrefunds.co.nz"; 
    var email = "nzprauto@gmail.com";
    
    // Subject of email message
    //var subject = ClientsName[j] +" Invoice(s) " + date.toString();
    var subject = ClientsEmail[j];
    var body;
    // Email Body can  be HTML too with your logo image - see ctrlq.org/html-mail
    //var body = ClientsName[j] +" Invoice(s) " + date.toString();
    if (ClientsFee[j] > 0) {//checks whether a fee is present to determine what invoices need to be sent 
      body = "Hi "+ClientsFirstName[j]+", \r\rGood news!\r\rWe've received your petrol refund from the NZTA and will be loading that up for payment into your bank account tonight.\r\rYour refund came to $"+clientRefundInclusive+".\r\rAttached to this email is a payment advice summary and our invoices.\r\rPlease note that our fees have been removed already so there is no need to take any action on these.\r\rMoving forward we will be putting a claim in on your behalf at the end of each financial quarter. We'll contact you to update our details in time for the next claim.\r\rPlease let me know if you have any questions.\r\rKind regards,\r\rBernard Coogan\r\rDirector\r\rNZ Petrol Refunds Limited\r\rnzpetrolrefunds.co.nz\r\r021 2066 719";
      
          
    } else {
      body = "Hi "+ClientsFirstName[j]+", \r\rWe have received your latest refund from the NZTA and will be loading that up for payment into your account tonight.\r\rYour refund came to $"+clientRefundInclusive+".\r\rPlease see attached payment notice and invoice.\r\rKind regards,\r\rBernard Coogan\r\rDirector\r\rNZ Petrol Refunds Limited\r\rnzpetrolrefunds.co.nz\r\r021 2066 719"
    }
    
        
    var url = ss.getUrl();
    url = url.replace(/edit$/, '');

    /* Specify PDF export parameters
    // From: https://code.google.com/p/google-apps-script-issues/issues/detail?id=3579
    exportFormat = pdf / csv / xls / xlsx
    gridlines = true / false
    printtitle = true (1) / false (0)
    size = legal / letter/ A4
    fzr (repeat frozen rows) = true / false
    portrait = true (1) / false (0)
    fitw (fit to page width) = true (1) / false (0)
    add gid if to export a particular sheet - 0, 1, 2,..
    */

    var url_ext = 'export?exportFormat=pdf&format=pdf' // export as pdf / csv / xls / xlsx
      + '&size=letter' // paper size
      + '&portrait=true' // orientation, false for landscape
      + '&fitw=true&source=labnol' // fit to width, false for actual size
      + '&sheetnames=false&printtitle=false' // hide optional headers and footers
      + '&pagenumbers=false&gridlines=false' // hide page numbers and gridlines
      + '&fzr=false' // do not repeat row headers (frozen rows) on each page
      + '&gid='; // the sheet's Id

    var token = ScriptApp.getOAuthToken();
    var sheets = ss.getSheets();

    //make an empty array to hold your fetched blobs  
    var blobs = [];

    ///////////////////////////////////////////////////////////////
    if (ClientsFee[j] > 0) {//checks whether a fee is present to determine what invoices need to be sent
    
      for (var i = 6; i < 7; i++) {//selecting sheet 6 to turn into pdf and email

        // Convert individual worksheets to PDF
        var response = cUseful.Utils.expBackoff(
          function() {
            return UrlFetchApp.fetch(url + url_ext + sheets[i].getSheetId(), {
              headers: {
                'Authorization': 'Bearer ' + token
              },
                muteHttpExceptions: true,
            });
          }, {
            logAttempts: true,
            lookahead: function(r) {
              return r.getResponseCode() === 429;
            }
          });

        //convert the response to a blob and store in our array
        //blobs[i] = response.getBlob().setName('Invoice ' + date.toString() + '.pdf');
        blobs[i] = response.getBlob().setName(sheets[i].getName() + '.pdf');
        
      }
      if (MailApp.getRemainingDailyQuota() > 0)
            GmailApp.sendEmail(email, subject, body, {
        attachments: [blobs[6].getAs(MimeType.PDF)],
        name: 'NZ Petrol Refunds'
      });
    }
    else {
      for (var i = 7; i < 8; i++) {//selecting sheets 7 to turn into pdf and email
        
        // Convert individual worksheets to PDF
        var response = cUseful.Utils.expBackoff(
          function() {
            return UrlFetchApp.fetch(url + url_ext + sheets[i].getSheetId(), {
                headers: {
                  'Authorization': 'Bearer ' + token
                },
                  muteHttpExceptions: true,
            });
          }, {
            logAttempts: true,
            lookahead: function(r) {
              return r.getResponseCode() === 429;
            }
          });
        
        //convert the response to a blob and store in our array
        //blobs[i] = response.getBlob().setName('Invoice ' + date.toString() + '.pdf');
        blobs[i] = response.getBlob().setName(sheets[i].getName() + '.pdf');
      }
      

      
      if (MailApp.getRemainingDailyQuota() > 0)
        GmailApp.sendEmail(email, subject, body, {
          attachments: [blobs[7].getAs(MimeType.PDF)],
          name: 'NZ Petrol Refunds'
        });
      
    }
   
    //END OF PDF AND EMAIL SECTION OF CODE/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////      


  }

  //inboxSheet.getRange(2, 1, inboxSheet.getLastRow(), inboxSheet.getLastColumn()).clear();    //clears the sheet
  //Browser.msgBox('Done', 'The Invoice pdfs for each client have been created and sent.', Browser.Buttons.OK);
  Browser.msgBox('Done', 'The Invoice pdfs for each client have been created (and draft emails within 5 mins).', Browser.Buttons.OK);
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    
function clearInboxSheet() {
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var inboxSheet = ss.getSheetByName("Inbox_Sheet");
    
  inboxSheet.getRange(2, 1, inboxSheet.getLastRow(), inboxSheet.getLastColumn()).clear();    //clears the sheet

}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    
function clearDataSheet() {
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var dataSheet = ss.getSheetByName("Data_Sheet");
    
  dataSheet.getRange(2, 1, dataSheet.getLastRow(), dataSheet.getLastColumn()).clear();

}
 
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//This function is in use; it merges client's NZTA emails into one per client and sends to Xero, also copies individual lines for sending to Xero for NZTA invoices
function sendToXero() {
  var NZPRcommisionRate = 0.15;        //this is where the NZPR commision is set
  
  var ListOfFEDNumbers = [];
  
  var ss = SpreadsheetApp.getActiveSpreadsheet();   //naming the spreadsheet and sheets
  var inboxSheet = ss.getSheetByName("Inbox_Sheet");
  var mergedSheet = ss.getSheetByName("Merged_Sheet");
  var singleSheet = ss.getSheetByName("Single_Sheet");
  var agentPaymentSheet = ss.getSheetByName("Agent_Payment");
    
  inboxSheet.getRange("N2").setFormula("=UNIQUE(A2:A)");
  inboxSheet.getRange("O2").setFormula("=COUNTA(N2:N)");
  
  var numberOfFEDNumbers = inboxSheet.getRange(2,15).getValues();
  
  var data = inboxSheet.getDataRange().getValues();    //storing all the data on the page in an array for use in all calcs
  
  //sends a copy of each line to single sheet
  for (var k = 1; k < data.length; k++){//appends Single_Sheet with all the lines from Inbox_Sheet
  singleSheet.appendRow([data[k][0],
                  data[k][1],
                  data[k][2],
                  data[k][3],
                  data[k][4],
                  data[k][5],
                  data[k][6],
                  data[k][7],
                  data[k][8],
                 ]);
  }

  for(n=0; n < numberOfFEDNumbers; ++n){
    ListOfFEDNumbers[n] = data[n+1][13]; // 13 is the index of the column (starting from 0)
  }
  
  Logger.log(numberOfFEDNumbers);
  Logger.log(ListOfFEDNumbers);
  
  var targetFED;// = ListOfFEDNumbers[1][0];
  
  
  var BtotalCredit = new Array(numberOfFEDNumbers);
  var DreferenceNumber = new Array(numberOfFEDNumbers);
  var EclaimPeriod = new Array(numberOfFEDNumbers);
  var Ffee = new Array(numberOfFEDNumbers);
      
  for (var i = 0; i < numberOfFEDNumbers; i++) {
    BtotalCredit[i] = 0;
    DreferenceNumber[i] = '| ';
    EclaimPeriod[i] =  '| ';
    Ffee[i] = 0;
  }
  
  var CpaymentDate = [];
  var GclientName = [];
  var Hagent = [];
  var IagentCut = [];
  
  var JnzprCommission = [];
  var KclientRefund = [];
  var LagentCommission = [];
   
  //for (var j = 1; j < ListOfFEDNumbers.length-1; j++){  //loop for each unique FED Number
  for (var j = 0; j < numberOfFEDNumbers; j++){  //loop for each unique FED Number to store the caluclated values
    //targetFED = ListOfFEDNumbers[j][0];
    targetFED = ListOfFEDNumbers[j];
    
    
    for (var i = 1; i < data.length; i++){   //loop for each line in the spreadsheet
      
      
      //merges and sends data to merged_sheet
      if(data[i][0] == targetFED){           //ensures the data stored in each of the following arrays is for each unique FED number
        BtotalCredit[j] = +BtotalCredit[j] + +data[i][1];
        CpaymentDate[j] = data[i][2];
        DreferenceNumber[j] += data[i][3] + " | ";
        EclaimPeriod[j] += data[i][4] + " | ";
        Ffee[j] += +data[i][5];
        GclientName[j] = data[i][6];
        Hagent[j] = data[i][7];
        IagentCut[j] = data[i][8];
      }
      
      /*
      JnzprCommission[j] = BtotalCredit[j]*NZPRcommisionRate+Ffee[j];
      KclientRefund[j] = BtotalCredit[j]*(1-NZPRcommisionRate)-Ffee[j];
      LagentCommission[j] = BtotalCredit[j]*(IagentCut[j]/100);
      */
      
      JnzprCommission[j] = (BtotalCredit[j]/1.15)*NZPRcommisionRate+Ffee[j];
      KclientRefund[j] = (BtotalCredit[j]/1.15)*(1-NZPRcommisionRate)-Ffee[j];
      LagentCommission[j] = (BtotalCredit[j]/1.15)*(IagentCut[j]/100);
      
      //Sends to Logger
      Logger.log(j+" "+i)
      Logger.log('targetFED: ' +targetFED);
      Logger.log('FED Number: ' + data[i][0]);
      Logger.log('Amount: ' + data[i][1]);
      Logger.log('Payment Date: ' + data[i][2]);
      Logger.log('Reference Number: ' + data[i][3]);
      Logger.log('Claim Period: ' + data[i][4]);
      Logger.log("SUM: " +BtotalCredit[j]);
      Logger.log("RefNo: "+DreferenceNumber[j]);
      Logger.log("Fee: "+Ffee[j]);
      Logger.log("  ");
    }
    

  }
  //mergedSheet.getRange(2, 1, mergedSheet.getLastRow(), mergedSheet.getLastColumn()).clear();    //clears the 2nd sheet immediately prior to data being written to it
  for (var k = 0; k < numberOfFEDNumbers; k++){
    
    mergedSheet.appendRow([ListOfFEDNumbers[k],
                           BtotalCredit[k],
                           CpaymentDate[k],
                           DreferenceNumber[k],
                           EclaimPeriod[k],
                           Ffee[k],
                           GclientName[k],
                           Hagent[k],
                           IagentCut[k],
                           JnzprCommission[k],
                           KclientRefund[k],
                           LagentCommission[k]
                          ]);
    
    //sends merged data & data for bill payments to Xero to agent_payment sheet
    agentPaymentSheet.appendRow([ListOfFEDNumbers[k],                                                  //FED No.
                                 BtotalCredit[k],                                                      //TOtal Credit
                                 CpaymentDate[k],                                                      //Payment Date
                                 DreferenceNumber[k],                                                  //Reference Number
                                 EclaimPeriod[k],                                                      //Claim Period
                                 Ffee[k],                                                              //Fee
                                 GclientName[k],                                                       //Client
                                 Hagent[k],                                                            //Agent Name
                                 IagentCut[k],                                                         //Agent Cut %
                                 "=VLOOKUP(AP_RangeH,Agents!$C$2:$M,11,0)",                            //GST Registered Y/N
                                 "=VLOOKUP(AP_RangeH,Agents!$C$2:$N,12,0)",                            //WT Registered Y/N
                                 "=(AP_RangeB/1.15)*(AP_RangeI/100)",                                  //Agent Commission Unit Price
                                 "",                                                                   //New Client Description (not used here)
                                 '="Commision on " & AP_RangeG & " for period(s) " & AP_RangeE',       //Description - Commission
                                 "Withholding Tax",                                                    //Description - WT
                                 "1",                                                                  //Qty - Commission
                                 '=AP_RangeL',                                                         //Qty - WT
                                 '=AP_RangeL',                                                         //Unit Price - Commission
                                 '=IF(AP_RangeK="Y",-0.2,"0")',                                        //Unit Price - WT                      
                                 "455",                                                                //Acc Code - Commission
                                 'WT',                                                                 //Acc Code - WT
                                 '="INPUT2"',                                                          //Tax Rate - Commision
                                 'NONE',                                                               //Tax Rate - WT
                                 '=IF(AP_RangeJ = "N","NoTax","Exclusive")'                            //*Tax Type 
                                ]);
    
   
  }
  
  //inboxSheet.getRange(2, 1, inboxSheet.getLastRow(), inboxSheet.getLastColumn()).clear();    //clears the sheet
    //Browser.msgBox('Merge & Clear', 'You have now finished with the Spreadsheet. The merged rows have been added to the "Merged_Sheet" to be sent to Xero.', Browser.Buttons.OK);
    Browser.msgBox('Send to Xero', 'The payment information has been sent to Xero.', Browser.Buttons.OK);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 
