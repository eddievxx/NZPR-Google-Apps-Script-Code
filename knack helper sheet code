///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
function sortList(){
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var firstSheet = ss.getSheetByName("Inbox_Sheet");
  var secondSheet = ss.getSheetByName("Merged_Sheet")
  
  var data = firstSheet.getDataRange().getValues();
  var ListOfFEDNumbers = secondSheet.getDataRange().getValues();
  
  var range = firstSheet.getRange("A2:K100");
  range.sort([{column: 1, ascending: true}, {column: 4, ascending: true}]);
  Browser.msgBox('Sort', 'List sorted (by client FED No. then Reference No.)', Browser.Buttons.OK);
}


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
function removeDuplicates() {
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var firstSheet = ss.getSheetByName("Inbox_Sheet");
  var secondSheet = ss.getSheetByName("Merged_Sheet")
  
  //var sheet = SpreadsheetApp.getActiveSheet();
  var cells = firstSheet.getDataRange().getValues();
  var newData = new Array();
  for(i in cells){
    var row = cells[i];
    var duplicate = false;
    for(j in newData){
      if(row.join() == newData[j].join()){
        duplicate = true;
      }
    }
    if(!duplicate){
      newData.push(row);
    }
  }
  firstSheet.clearContents();
  firstSheet.getRange(1, 1, newData.length, newData[0].length).setValues(newData);
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
function clearFirstSheet() {
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var firstSheet = ss.getSheetByName("Inbox_Sheet");
    
  firstSheet.getRange(2, 1, firstSheet.getLastRow(), firstSheet.getLastColumn()).clear();

}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
function clearDataSheet() {
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var dataSheet = ss.getSheetByName("Data_Sheet");
    
  dataSheet.getRange(2, 1, dataSheet.getLastRow(), dataSheet.getLastColumn()).clear();

}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
function feeChecks() {
  var NZPRcommisionRate = 0.15;        //this is where the NZPR commision is set
  
  var ListOfFEDNumbers = [];
  
  var ss = SpreadsheetApp.getActiveSpreadsheet();   //naming the spreadsheet and sheets
  var firstSheet = ss.getSheetByName("Inbox_Sheet");
  var secondSheet = ss.getSheetByName("Merged_Sheet");
  
  firstSheet.getRange("N2").setFormula("=UNIQUE(A2:A)");
  firstSheet.getRange("O2").setFormula("=COUNTA(N2:N)");
  
  var numberOfFEDNumbers = firstSheet.getRange(2,15).getValues();
  
  var data = firstSheet.getDataRange().getValues();    //storing all the data on the page in an array for use in all calcs
  
  //var ListOfFEDNumbers = [0];
  //var ListOfFEDNumbers = firstSheet.getRange("N2:N"+(numberOfFEDNumbers+1)).getValues();   //storing the list of unique FED numbers
  //var ListOfFEDNumbers = firstSheet.getRange(2,14).getValues();   //storing the list of unique FED numbers
  //var ListOfFEDNumbers = firstSheet.getDataRange().getValues();
  for(n=0; n < numberOfFEDNumbers; ++n){
    ListOfFEDNumbers[n] = data[n+1][13]; // 13 is the index of the column (starting from 0)
  }
  
  Logger.log(numberOfFEDNumbers);
  Logger.log(ListOfFEDNumbers);
  
  var targetFED;// = ListOfFEDNumbers[1][0];
  
  
  var BtotalCredit = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];     //initialises the Amount array ********************************* THIS NEEDS IMPROVEMENT
  var CpaymentDate = [];
  var DreferenceNumber = ['| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| '];   //initialises the Ref Number **********NEEDS IMPROVEMENT
  var EclaimPeriod = ['| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| '];       //initialises the Claim Period ********NEEDS IMPROVEMENT
  var Ffee = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];              // ********************************************************** THIS NEEDS IMPROVEMENT
  var GclientName = [];
  var Hagent = [];
  var IagentCut = [];
  
  var JnzprCommission = [];
  var KclientRefund = [];
  var LagentCommission = [];
   
  //for (var j = 1; j < ListOfFEDNumbers.length-1; j++){  //loop for each unique FED Number
  for (var j = 0; j < numberOfFEDNumbers; j++){  //loop for each unique FED Number
    //targetFED = ListOfFEDNumbers[j][0];
    targetFED = ListOfFEDNumbers[j];
    
    for (var i = 1; i < data.length; i++){   //loop for each line in the spreadsheet
      if(data[i][0] == targetFED){           //ensures the data stored in each of the following arrays is for each unique FED number
        BtotalCredit[j] = +BtotalCredit[j] + +data[i][1];
        CpaymentDate[j] = data[i][2];
        DreferenceNumber[j] += data[i][3] + " | ";
        EclaimPeriod[j] += data[i][4] + " | ";
        Ffee[j] += +data[i][5];
        GclientName[j] = data[i][6];
        Hagent[j] = data[i][7];
        IagentCut[j] = data[i][8];
      }
      
      JnzprCommission[j] = BtotalCredit[j]*NZPRcommisionRate+Ffee[j];
      KclientRefund[j] = BtotalCredit[j]*(1-NZPRcommisionRate)-Ffee[j];
      LagentCommission[j] = BtotalCredit[j]*(IagentCut[j]/100);
      
      //Sends to Logger
      Logger.log(j+" "+i)
      Logger.log('targetFED: ' +targetFED);
      Logger.log('FED Number: ' + data[i][0]);
      Logger.log('Amount: ' + data[i][1]);
      Logger.log('Payment Date: ' + data[i][2]);
      Logger.log('Reference Number: ' + data[i][3]);
      Logger.log('Claim Period: ' + data[i][4]);
      Logger.log("SUM: " +BtotalCredit[j]);
      Logger.log("RefNo: "+DreferenceNumber[j]);
      Logger.log("Fee: "+Ffee[j]);
      Logger.log("  ");
    }
    
    if(KclientRefund[j] < 0){
      Browser.msgBox('Fee Check', 'Fee will be too large for '+GclientName[j]+', current refund is '+KclientRefund[j]+'. Reduce the fee then run this Check again.', Browser.Buttons.OK);
      return;
    }
    
      
    
    /*
    secondSheet.getRange(j+2,1).setValue(ListOfFEDNumbers[j]);
    secondSheet.getRange(j+2,2).setValue(BtotalCredit[j]);           //this is writing the merged data to the correct cells on the 2nd sheet
    secondSheet.getRange(j+2,3).setValue(CpaymentDate[j]);
    secondSheet.getRange(j+2,4).setValue(DreferenceNumber[j]);
    secondSheet.getRange(j+2,5).setValue(EclaimPeriod[j]);
    secondSheet.getRange(j+2,6).setValue(Ffee[j]);
    secondSheet.getRange(j+2,7).setValue(GclientName[j]);
    secondSheet.getRange(j+2,8).setValue(Hagent[j]);
    secondSheet.getRange(j+2,9).setValue(IagentCut[j]);
    secondSheet.getRange(j+2,10).setValue(JnzprCommission[j]);     
    secondSheet.getRange(j+2,11).setValue(KclientRefund[j]);
    secondSheet.getRange(j+2,12).setValue(LagentCommission[j]);    
    */
  }
  //firstSheet.getRange(2, 1, firstSheet.getLastRow(), firstSheet.getLastColumn()).clear();    //clears the sheet
  Browser.msgBox('Fee Check', 'All Refund amounts are positive, you can now Merge & Clear', Browser.Buttons.OK);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function merge() {
  var NZPRcommisionRate = 0.15;        //this is where the NZPR commision is set
  
  var ListOfFEDNumbers = [];
  
  var ss = SpreadsheetApp.getActiveSpreadsheet();   //naming the spreadsheet and sheets
  var firstSheet = ss.getSheetByName("Inbox_Sheet");
  var secondSheet = ss.getSheetByName("Merged_Sheet");
  
  firstSheet.getRange("N2").setFormula("=UNIQUE(A2:A)");
  firstSheet.getRange("O2").setFormula("=COUNTA(N2:N)");
  
  var numberOfFEDNumbers = firstSheet.getRange(2,15).getValues();
  
  var data = firstSheet.getDataRange().getValues();    //storing all the data on the page in an array for use in all calcs
  
  //var ListOfFEDNumbers = [0];
  //var ListOfFEDNumbers = firstSheet.getRange("N2:N"+(numberOfFEDNumbers+1)).getValues();   //storing the list of unique FED numbers
  //var ListOfFEDNumbers = firstSheet.getRange(2,14).getValues();   //storing the list of unique FED numbers
  //var ListOfFEDNumbers = firstSheet.getDataRange().getValues();
  for(n=0; n < numberOfFEDNumbers; ++n){
    ListOfFEDNumbers[n] = data[n+1][13]; // 13 is the index of the column (starting from 0)
  }
  
  Logger.log(numberOfFEDNumbers);
  Logger.log(ListOfFEDNumbers);
  
  var targetFED;// = ListOfFEDNumbers[1][0];
  
  
  var BtotalCredit = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];     //initialises the Amount array ********************************* THIS NEEDS IMPROVEMENT
  var CpaymentDate = [];
  var DreferenceNumber = ['| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| '];   //initialises the Ref Number **********NEEDS IMPROVEMENT
  var EclaimPeriod = ['| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| '];       //initialises the Claim Period ********NEEDS IMPROVEMENT
  var Ffee = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];              // ********************************************************** THIS NEEDS IMPROVEMENT
  var GclientName = [];
  var Hagent = [];
  var IagentCut = [];
  
  var JnzprCommission = [];
  var KclientRefund = [];
  var LagentCommission = [];
   
  //for (var j = 1; j < ListOfFEDNumbers.length-1; j++){  //loop for each unique FED Number
  for (var j = 0; j < numberOfFEDNumbers; j++){  //loop for each unique FED Number to store the caluclated values
    //targetFED = ListOfFEDNumbers[j][0];
    targetFED = ListOfFEDNumbers[j];
    
    for (var i = 1; i < data.length; i++){   //loop for each line in the spreadsheet
      if(data[i][0] == targetFED){           //ensures the data stored in each of the following arrays is for each unique FED number
        BtotalCredit[j] = +BtotalCredit[j] + +data[i][1];
        CpaymentDate[j] = data[i][2];
        DreferenceNumber[j] += data[i][3] + " | ";
        EclaimPeriod[j] += data[i][4] + " | ";
        Ffee[j] += +data[i][5];
        GclientName[j] = data[i][6];
        Hagent[j] = data[i][7];
        IagentCut[j] = data[i][8];
      }
      
      JnzprCommission[j] = BtotalCredit[j]*NZPRcommisionRate+Ffee[j];
      KclientRefund[j] = BtotalCredit[j]*(1-NZPRcommisionRate)-Ffee[j];
      LagentCommission[j] = BtotalCredit[j]*(IagentCut[j]/100);
      
      //Sends to Logger
      Logger.log(j+" "+i)
      Logger.log('targetFED: ' +targetFED);
      Logger.log('FED Number: ' + data[i][0]);
      Logger.log('Amount: ' + data[i][1]);
      Logger.log('Payment Date: ' + data[i][2]);
      Logger.log('Reference Number: ' + data[i][3]);
      Logger.log('Claim Period: ' + data[i][4]);
      Logger.log("SUM: " +BtotalCredit[j]);
      Logger.log("RefNo: "+DreferenceNumber[j]);
      Logger.log("Fee: "+Ffee[j]);
      Logger.log("  ");
    }
    

  }
  //secondSheet.getRange(2, 1, secondSheet.getLastRow(), secondSheet.getLastColumn()).clear();    //clears the 2nd sheet immediately prior to data being written to it
  for (var k = 0; k < numberOfFEDNumbers; k++){
    
    secondSheet.appendRow([ListOfFEDNumbers[k],
                           BtotalCredit[k],
                           CpaymentDate[k],
                           DreferenceNumber[k],
                           EclaimPeriod[k],
                           Ffee[k],
                           GclientName[k],
                           Hagent[k],
                           IagentCut[k],
                           JnzprCommission[k],
                           KclientRefund[k],
                           LagentCommission[k]
                          ]);
    
    //secondSheet.getRange(k+2,1).setValue(ListOfFEDNumbers[k]);
    //secondSheet.getRange(k+2,2).setValue(BtotalCredit[k]);           //this is writing the merged data to the correct cells on the 2nd sheet
    //secondSheet.getRange(k+2,3).setValue(CpaymentDate[k]);
    //secondSheet.getRange(k+2,4).setValue(DreferenceNumber[k]);
    //secondSheet.getRange(k+2,5).setValue(EclaimPeriod[k]);
    //secondSheet.getRange(k+2,6).setValue(Ffee[k]);
    //secondSheet.getRange(k+2,7).setValue(GclientName[k]);
    //secondSheet.getRange(k+2,8).setValue(Hagent[k]);
    //secondSheet.getRange(k+2,9).setValue(IagentCut[k]);
    //secondSheet.getRange(k+2,10).setValue(JnzprCommission[k]);     
    //secondSheet.getRange(k+2,11).setValue(KclientRefund[k]);
    //secondSheet.getRange(k+2,12).setValue(LagentCommission[k]); 
    
    
  }
  
  firstSheet.getRange(2, 1, firstSheet.getLastRow(), firstSheet.getLastColumn()).clear();    //clears the sheet
  Browser.msgBox('Merge & Clear', 'You have now finished with the Spreadsheet. The merged rows have been added to the "Merged_Sheet" to be sent to Xero.', Browser.Buttons.OK);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


function createRemittanceAdvice() {
  var NZPRcommisionRate = 0.15;        //this is where the NZPR commision is set
  
  var ListOfFEDNumbers = [];
  
  var ss = SpreadsheetApp.getActiveSpreadsheet();   //naming the spreadsheet and sheets
  var inboxSheet = ss.getSheetByName("Inbox_Sheet");
  var dataSheet = ss.getSheetByName("Data_Sheet");
  var templateSheet = ss.getSheetByName("Template_Sheet");
  
  inboxSheet.getRange("N2").setFormula("=UNIQUE(A2:A)");
  inboxSheet.getRange("O2").setFormula("=COUNTA(N2:N)");
  
  var numberOfFEDNumbers = inboxSheet.getRange(2,15).getValues();
  
  var data = inboxSheet.getDataRange().getValues();    //storing all the data on the page in an array for use in all calcs
  
  //var ListOfFEDNumbers = [0];
  //var ListOfFEDNumbers = firstSheet.getRange("N2:N"+(numberOfFEDNumbers+1)).getValues();   //storing the list of unique FED numbers
  //var ListOfFEDNumbers = firstSheet.getRange(2,14).getValues();   //storing the list of unique FED numbers
  //var ListOfFEDNumbers = firstSheet.getDataRange().getValues();
  for(n=0; n < numberOfFEDNumbers; ++n){
    ListOfFEDNumbers[n] = data[n+1][13]; // 13 is the index of the column (starting from 0)
  }
  
  Logger.log(numberOfFEDNumbers);
  Logger.log(ListOfFEDNumbers);
  
  var targetFED;// = ListOfFEDNumbers[1][0];
  
  var BtotalCredit = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];     //initialises the Amount array ********************************* THIS NEEDS IMPROVEMENT
  var CpaymentDate = [];
  var DreferenceNumber = ['| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| '];   //initialises the Ref Number **********NEEDS IMPROVEMENT
  var EclaimPeriod = ['| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| ','| '];       //initialises the Claim Period ********NEEDS IMPROVEMENT
  var Ffee = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];              // ********************************************************** THIS NEEDS IMPROVEMENT
  var GclientName = [];
  var Hagent = [];
  var IagentCut = [];
  
  var JnzprCommission = [];
  var KclientRefund = [];
  var LagentCommission = [];
  
  //for (var j = 1; j < ListOfFEDNumbers.length-1; j++){  //loop for each unique FED Number
  for (var j = 0; j < numberOfFEDNumbers; j++){  //loop for each unique FED Number to store the caluclated values
    //targetFED = ListOfFEDNumbers[j][0];
    targetFED = ListOfFEDNumbers[j];
    
    for (var i = 1; i < data.length; i++){   //loop for each line in the spreadsheet
      if(data[i][0] == targetFED){           //ensures the data stored in each of the following arrays is for each unique FED number
        
        
        dataSheet.appendRow([data[i][0],
                             data[i][1],
                             data[i][2],
                             data[i][3],
                             data[i][4],
                             data[i][5],
                             data[i][6],
                             data[i][7],
                             data[i][8],
                             data[i][9],
                             data[i][10],
                             data[i][11],
                            ]);
                             
                             }
                             
                             
                             //                             JnzprCommission[j] = BtotalCredit[j]*NZPRcommisionRate+Ffee[j];
                             //                            KclientRefund[j] = BtotalCredit[j]*(1-NZPRcommisionRate)-Ffee[j];
                             //        LagentCommission[j] = BtotalCredit[j]*(IagentCut[j]/100);
                             
                             
                             
                             
                             
                             }
                             clearDataSheet();
                             Utilities.sleep(3000);////////////////////////////////////////////////////////////////
      
      emailSpreadsheetAsPDF();
      
                             
      
      Utilities.sleep(2000);//////////////////////////////////////////////////////////////
      Browser.msgBox('Populating Template', 'You have now populated one template.', Browser.Buttons.OK);
    }
    
    
    
                             //inboxSheet.getRange(2, 1, inboxSheet.getLastRow(), inboxSheet.getLastColumn()).clear();    //clears the sheet
                             Browser.msgBox('Done', 'You have now finished creating the Remittance Advice sheets.', Browser.Buttons.OK);
                             }
                             
                             ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                             function emailSpreadsheetAsPDF() 
                             {
                             
                             var ss = SpreadsheetApp.getActiveSpreadsheet();   //naming the spreadsheet and sheets
                             var inboxSheet = ss.getSheetByName("Inbox_Sheet");
                             var dataSheet = ss.getSheetByName("Data_Sheet");
                             var templateSheet = ss.getSheetByName("Template_Sheet");
                             
                             var date = Utilities.formatDate(new Date(), "GMT+12", "dd-MM-yyyy'T'HH:mm:ss'Z'");
                             
                             // Send the PDF of the spreadsheet to this email address
                             var email = "nathanjeffreyyoung@gmail.com"; 
                             
                             // Subject of email message
                             var subject = " Remittance Advice " + date.toString(); 
                             
                             // Email Body can  be HTML too with your logo image - see ctrlq.org/html-mail
                             var body = " Remittance Advice " + date.toString(); 
                             
                             var url = ss.getUrl();
                             url = url.replace(/edit$/,'');
                             
                             /* Specify PDF export parameters
                             // From: https://code.google.com/p/google-apps-script-issues/issues/detail?id=3579
                             exportFormat = pdf / csv / xls / xlsx
                             gridlines = true / false
                             printtitle = true (1) / false (0)
                             size = legal / letter/ A4
                             fzr (repeat frozen rows) = true / false
                             portrait = true (1) / false (0)
                             fitw (fit to page width) = true (1) / false (0)
                             add gid if to export a particular sheet - 0, 1, 2,..
                             */
                             
                             var url_ext = 'export?exportFormat=pdf&format=pdf'   // export as pdf / csv / xls / xlsx
                             + '&size=letter'                       // paper size
                             + '&portrait=true'                    // orientation, false for landscape
                             + '&fitw=true&source=labnol'           // fit to width, false for actual size
                             + '&sheetnames=false&printtitle=false' // hide optional headers and footers
                             + '&pagenumbers=false&gridlines=false' // hide page numbers and gridlines
                             + '&fzr=false'                         // do not repeat row headers (frozen rows) on each page
                             + '&gid=';                             // the sheet's Id
                             
                             var token = ScriptApp.getOAuthToken();
                             var sheets = ss.getSheets(); 
                             
                             //make an empty array to hold your fetched blobs  
                             var blobs = [];
                            
                            for (var i=5; i<6; i++) {
          
          // Convert individual worksheets to PDF
          var response = cUseful.Utils.expBackoff (
            function () {
              return UrlFetchApp.fetch(url + url_ext  + sheets[i].getSheetId(),{headers: {'Authorization': 'Bearer ' +  token},
                muteHttpExceptions:true,                     
                                                                               });
            }, {
              logAttempts:true,
              lookahead:function (r) {return r.getResponseCode() === 429;}
            });
          
          //convert the response to a blob and store in our array
          blobs[i] = response.getBlob().setName(' Remittance Advice '+ date.toString()+ '.pdf');
          
        }
        
        // If allowed to send emails, send the email with the PDF attachment
        if (MailApp.getRemainingDailyQuota() > 0) 
          GmailApp.sendEmail(email, subject, body, {attachments:[blobs[5].getAs(MimeType.PDF)], name: 'NZTA Payment Advice Notes Calculator Spreadsheet'});
      }
    
      
      ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//THIS IS THE ONE TO IMPLEMENT

function emailRemittanceAdvice() {
  var NZPRcommisionRate = 0.15; //this is where the NZPR commision is set

  var ListOfFEDNumbers = [];

  var ss = SpreadsheetApp.getActiveSpreadsheet(); //naming the spreadsheet and sheets
  var inboxSheet = ss.getSheetByName("Inbox_Sheet");
  var dataSheet = ss.getSheetByName("Data_Sheet");
  var templateSheet = ss.getSheetByName("Template_Sheet");

  inboxSheet.getRange("N2").setFormula("=UNIQUE(A2:A)");
  inboxSheet.getRange("O2").setFormula("=COUNTA(N2:N)");

  var numberOfFEDNumbers = inboxSheet.getRange(2, 15).getValues();

  var data = inboxSheet.getDataRange().getValues(); //storing all the data on the page in an array for use in all calcs

  //var ListOfFEDNumbers = [0];
  //var ListOfFEDNumbers = firstSheet.getRange("N2:N"+(numberOfFEDNumbers+1)).getValues();   //storing the list of unique FED numbers
  //var ListOfFEDNumbers = firstSheet.getRange(2,14).getValues();   //storing the list of unique FED numbers
  //var ListOfFEDNumbers = firstSheet.getDataRange().getValues();
  for (n = 0; n < numberOfFEDNumbers; ++n) {
    ListOfFEDNumbers[n] = data[n + 1][13]; // 13 is the index of the column (starting from 0)
  }

  Logger.log(numberOfFEDNumbers);
  Logger.log(ListOfFEDNumbers);

  var targetFED; // = ListOfFEDNumbers[1][0];

  //var BtotalCredit = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; //initialises the Amount array ********************************* THIS NEEDS IMPROVEMENT
  //var CpaymentDate = [];
  //var DreferenceNumber = ['| ', '| ', '| ', '| ', '| ', '| ', '| ', '| ', '| ', '| ', '| ', '| ', '| ', '| ', '| ', '| ', '| ', '| ', '| ', '| ', '| ', '| ', '| ', '| ', '| ', '| ', '| ', '| ', '| ', '| ']; //initialises the Ref Number **********NEEDS IMPROVEMENT
  //var EclaimPeriod = ['| ', '| ', '| ', '| ', '| ', '| ', '| ', '| ', '| ', '| ', '| ', '| ', '| ', '| ', '| ', '| ', '| ', '| ', '| ', '| ', '| ', '| ', '| ', '| ', '| ', '| ', '| ', '| ', '| ', '| ']; //initialises the Claim Period ********NEEDS IMPROVEMENT
  //var Ffee = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; // ********************************************************** THIS NEEDS IMPROVEMENT
  //var GclientName = [];
  //var Hagent = [];
  //var IagentCut = [];

  //var JnzprCommission = [];
  //var KclientRefund = [];
  //var LagentCommission = [];

  var ClientsName = [];
  
  //for (var j = 1; j < ListOfFEDNumbers.length-1; j++){  //loop for each unique FED Number
  for (var j = 0; j < numberOfFEDNumbers; j++) { //loop for each unique FED Number to store the caluclated values
    //targetFED = ListOfFEDNumbers[j][0];
    targetFED = ListOfFEDNumbers[j];

    for (var i = 1; i < data.length; i++) { //loop for each line in the spreadsheet
      if (data[i][0] == targetFED) { //ensures the data stored in each of the following arrays is for each unique FED number


        dataSheet.appendRow([data[i][0],//writes data from the correct FED number only to the data_sheet
          data[i][1],
          data[i][2],
          data[i][3],
          data[i][4],
          data[i][5],
          data[i][6],
          data[i][7],
          data[i][8],
          data[i][9],
          data[i][10],
          data[i][11],
        ]);
      ClientsName[j] = data[i][6];
      }
      
    }
    clearDataSheet();
    //PDF CONVERSION AND EMAIL SECTION OF CODE////////////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                         
    Logger.log(ClientsName[j]);
    var date = Utilities.formatDate(new Date(), "GMT+12", "dd-MM-yyyy'T'HH:mm:ss'Z'");

    // Send the PDF of the spreadsheet to this email address
    var email = "nathanjeffreyyoung@gmail.com";

    // Subject of email message
    var subject = ClientsName[j] +" Remittance Advice " + date.toString();

    // Email Body can  be HTML too with your logo image - see ctrlq.org/html-mail
    var body = ClientsName[j] +" Remittance Advice " + date.toString();

    var url = ss.getUrl();
    url = url.replace(/edit$/, '');

    /* Specify PDF export parameters
    // From: https://code.google.com/p/google-apps-script-issues/issues/detail?id=3579
    exportFormat = pdf / csv / xls / xlsx
    gridlines = true / false
    printtitle = true (1) / false (0)
    size = legal / letter/ A4
    fzr (repeat frozen rows) = true / false
    portrait = true (1) / false (0)
    fitw (fit to page width) = true (1) / false (0)
    add gid if to export a particular sheet - 0, 1, 2,..
    */

    var url_ext = 'export?exportFormat=pdf&format=pdf' // export as pdf / csv / xls / xlsx
      + '&size=letter' // paper size
      + '&portrait=true' // orientation, false for landscape
      + '&fitw=true&source=labnol' // fit to width, false for actual size
      + '&sheetnames=false&printtitle=false' // hide optional headers and footers
      + '&pagenumbers=false&gridlines=false' // hide page numbers and gridlines
      + '&fzr=false' // do not repeat row headers (frozen rows) on each page
      + '&gid='; // the sheet's Id

    var token = ScriptApp.getOAuthToken();
    var sheets = ss.getSheets();

    //make an empty array to hold your fetched blobs  
    var blobs = [];

    for (var i = 5; i < 6; i++) {

      // Convert individual worksheets to PDF
      var response = cUseful.Utils.expBackoff(
        function() {
          return UrlFetchApp.fetch(url + url_ext + sheets[i].getSheetId(), {
            headers: {
              'Authorization': 'Bearer ' + token
            },
            muteHttpExceptions: true,
          });
        }, {
          logAttempts: true,
          lookahead: function(r) {
            return r.getResponseCode() === 429;
          }
        });

      //convert the response to a blob and store in our array
      blobs[i] = response.getBlob().setName('Remittance Advice ' + date.toString() + '.pdf');

    }

    // If allowed to send emails, send the email with the PDF attachment
    if (MailApp.getRemainingDailyQuota() > 0)
      GmailApp.sendEmail(email, subject, body, {
        attachments: [blobs[5].getAs(MimeType.PDF)],
        name: 'NZTA Payment Advice Notes Calculator Spreadsheet'
      });
    //END OF PDF AND EMAIL SECTION OF CODE/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////      


    Browser.msgBox('Populating Template', 'You have now populated one template.', Browser.Buttons.OK);
  }



  //inboxSheet.getRange(2, 1, inboxSheet.getLastRow(), inboxSheet.getLastColumn()).clear();    //clears the sheet
  Browser.msgBox('Done', 'You have now finished creating the Remittance Advice sheets.', Browser.Buttons.OK);
}
    
function OnForm(){
  var sh = SpreadsheetApp.getActiveSheet()
  var startcell = sh.getRange('A1').getValue();
  if(! startcell){sh.getRange('A1').setValue(1);return}; // this is only to handle initial situation when A1 is empty.
  var colValues = sh.getRange('A1:A').getValues();// get all the values in column A in an array
  var max=0;// define the max variable to a minimal value
  for(var r in colValues){ // iterate the array
    if(Number(colValues[r][0]>max)){max=colValues[r][0]};// get the highest numeric value in th column, no matter what happens in the column... this runs at array level so it is very fast
  }
  max++ ; // increment to be 1 above max value
  sh.getRange(sh.getLastRow()+1, 1).setValue(max);// and write it back to sheet's last row.
}
